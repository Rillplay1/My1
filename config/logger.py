import logging
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Определение базовой директории проекта: Получаем путь к родительской директории текущего файла
# (двойной вызов os.path.dirname помогает выйти на уровень выше). Это нужно, чтобы не зависеть от текущей рабочей директории

LOG_DIR = os.path.join(BASE_DIR, 'logs')
# Путь к папке для логов: Создаем путь к папке logs в корне проекта, объединяя путь BASE_DIR с именем папки 'logs'.

os.makedirs(LOG_DIR, exist_ok=True)
# Создание папки для логов: Если папка logs ещё не существует, она будет создана
# Параметр exist_ok=True позволяет избежать ошибки, если папка уже есть

LOG_FILE = os.path.join(LOG_DIR, 'test.log')
#Путь к файлу лога: Формируем полный путь к файлу логов, который будет находиться в папке logs и называться test.log.

logger = logging.getLogger("MyLogger")
# Создание логгера: Получаем экземпляр логгера с именем "MyLogger"
# Это имя будет использоваться для различения логгеров в более сложных приложениях

logger.setLevel(logging.DEBUG)
# Устанавливаем уровень логирования: Устанавливаем минимальный уровень логирования как DEBUG
# Это означает, что будут записываться все сообщения уровня DEBUG и выше (INFO, WARNING, ERROR, CRITICAL)

if not logger.handlers:
#Проверка наличия хендлеров: Проверяем, есть ли уже добавленные хендлеры(механизмы записи логов).Если ихнет, будем добавлять

    file_handler = logging.FileHandler(LOG_FILE, mode='a', encoding='utf-8')
# Создание обработчика для записи в файл: Создаем хендлер, который будет записывать логи в файл test.log
# Параметр mode='a' указывает на режим добавления в файл (не перезаписывать, а дописывать)
# Кодировка utf-8 обеспечит правильное сохранение русскоязычных символов

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
#Форматирование логов: Определяем формат для сообщений логов, где будет отображаться:
# %(asctime)s - время записи
#%(levelname) - уровень лога
#%(message)s' - сообщение лога

    file_handler.setFormatter(formatter)
#Применение форматтера к хендлеру: Устанавливаем созданный формат для хендлера.

    logger.addHandler(file_handler)
#Добавление хендлера в логгер: Добавляем файл-обработчик в логгер, чтобы логи начали записываться в файл.